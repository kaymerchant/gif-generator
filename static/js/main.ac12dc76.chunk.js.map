{"version":3,"sources":["App.module.css","Containers/MainPage/MainPage.module.css","Containers/MainPage/MainPage.js","App.js","serviceWorker.js","index.js"],"names":["module","exports","MainPage","state","category","typeOfGif","imageLink","isclicked","modalStatus","altImage","onloadHandler","setState","axios","get","then","response","i","link","data","images","downsized_large","url","imageList","push","categoryHandle","event","target","value","setImagegifName","gifName","imageDisplayHandler","className","classes","imageLayout","map","index","key","src","alt","onClick","enlargeImageHandler","imageSize","getGifHandler","gifType","alert","console","log","modal","searchBar","type","name","onChange","this","button","Component","App","document","title","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","getElementById","navigator","serviceWorker","ready","registration","unregister","catch","error","message"],"mappings":"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","file":"static/js/main.ac12dc76.chunk.js","sourcesContent":["// extracted by mini-css-extract-plugin\nmodule.exports = {\"App\":\"App_App__EFvRj\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"searchBar\":\"MainPage_searchBar__2WHmn\",\"button\":\"MainPage_button__3lssK\",\"imageLayout\":\"MainPage_imageLayout__12JIA\",\"imageSize\":\"MainPage_imageSize__2x-Um\",\"enlargeImage\":\"MainPage_enlargeImage__2hp4n\",\"modal\":\"MainPage_modal__2JAUV\"};","import React, { Component } from 'react';\r\nimport classes from '../MainPage/MainPage.module.css'\r\nimport axios from 'axios'\r\n\r\n\r\nclass MainPage extends Component{  \r\n\r\n  state = {\r\n    category : null,\r\n    typeOfGif : ' ',\r\n    imageLink : [],\r\n    isclicked : false,\r\n    modalStatus : false,\r\n    altImage : null\r\n  }\r\n\r\n  onloadHandler = () => {\r\n    this.setState({isclicked: true})\r\n    axios.get('https://api.giphy.com/v1/gifs/trending?api_key=QzwdaWAASennLz0xLqS1NBLUOHaGVjxs&limit=24')\r\n    .then(response => {\r\n        for(let i = 0; i < 20; i++) {\r\n          var link = response.data.data[i].images.downsized_large.url;\r\n          var imageList = [...this.state.imageLink]\r\n          imageList.push(link);\r\n          this.setState({imageLink : imageList})\r\n        }\r\n        return;\r\n    })\r\n  }\r\n\r\n  categoryHandle = (event) => {\r\n      this.setState({category:event.target.value})\r\n  }\r\n\r\n  setImagegifName = (event) => {\r\n    var gifName =  event.target.value\r\n    this.setState({typeOfGif:gifName});\r\n\r\n  }\r\n\r\n  imageDisplayHandler = () => {\r\n    return (<div className={classes.imageLayout}>\r\n        {this.state.imageLink.map((images, index) => {\r\n        return ( \r\n                <img key= {index} \r\n                src={images} \r\n                alt={index}\r\n                onClick={this.enlargeImageHandler} className={classes.imageSize}/>\r\n                )\r\n        })}\r\n        </div>)\r\n  }\r\n\r\n  getGifHandler = () => {\r\n    let category = this.state.category;\r\n    let gifType = this.state.typeOfGif;\r\n    if(category === null) {\r\n        alert(\"Please select category\");\r\n        return;\r\n    }\r\n\r\n    if(this.state.imageLink != null) {\r\n        this.setState({imageLink : []})\r\n    }\r\n    axios.get('https://api.giphy.com/v1/'+ category +'/search?api_key=QzwdaWAASennLz0xLqS1NBLUOHaGVjxs&q=' + gifType + '&limit=24')\r\n    .then(response => {\r\n        for(let i = 0; i < 24; i++) {\r\n          var link = response.data.data[i].images.downsized_large.url;\r\n          var imageList = [...this.state.imageLink]\r\n          imageList.push(link);\r\n          this.setState({imageLink : imageList})\r\n        }\r\n    })\r\n  }\r\n\r\n  enlargeImageHandler= (event) => {    \r\n        if(!this.state.modalStatus && this.state.altImage === null) {\r\n            event.target.className=classes.modal\r\n            this.setState({modalStatus:true})\r\n            this.setState({altImage:event.target.alt})\r\n        }\r\n        else if (this.state.modalStatus && this.state.altImage === event.target.alt) {\r\n            event.target.className=classes.imageSize\r\n            this.setState({modalStatus:false})\r\n            this.setState({altImage:null})\r\n            console.log(\"2\");\r\n        }   \r\n  }\r\n\r\nrender() {\r\n    return (\r\n        <div>\r\n            <div className={classes.searchBar}>\r\n                <label>\r\n                <input type=\"radio\" value=\"gifs\" name = \"category\" onChange={this.categoryHandle}/>\r\n                    Gifs\r\n                </label>\r\n                <label>\r\n                <input type=\"radio\" value=\"stickers\" name = \"category\" onChange={this.categoryHandle}/>\r\n                    Stickers\r\n                </label>\r\n                <div>\r\n                    <input type=\"text\"  onChange={this.setImagegifName}/><br/>\r\n                    <input type=\"button\" value=\"Let's Go!\" onClick={this.getGifHandler} className={classes.button}/>\r\n                </div>\r\n            </div>\r\n            {this.state.isclicked ? this.imageDisplayHandler() : this.onloadHandler()}\r\n        </div>\r\n  );\r\n  }\r\n}\r\n\r\nexport default MainPage;","import React, { Component } from 'react';\n\nimport classes from '../src/App.module.css';\nimport MainPage from './Containers/MainPage/MainPage';\n\nclass App extends Component{  \n\n  componentDidMount() {\n    document.title = \"Gif Generator\";\n  }\n  \nrender() {\n\n    return (\n        <div className={classes.App}>\n          <MainPage/>\n        </div>\n  );\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}